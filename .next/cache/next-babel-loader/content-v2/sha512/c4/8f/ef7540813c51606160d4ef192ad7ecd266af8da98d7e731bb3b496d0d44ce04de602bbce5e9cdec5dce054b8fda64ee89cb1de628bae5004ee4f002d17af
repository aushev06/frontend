{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\components\\\\CommentList\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { PostComment } from \"../PostComment\";\nimport { useSelector } from \"react-redux\";\nimport { selectUserState } from \"../../redux/user/user.selector\";\nexport var CommentList = function CommentList(_ref) {\n  _s();\n\n  var comments = _ref.comments,\n      onReplyComment = _ref.onReplyComment,\n      onSetLike = _ref.onSetLike;\n  var user = useSelector(selectUserState)['data'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: comments.map(function (comment) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PostComment, {\n          onReplyComment: onReplyComment,\n          comment: comment,\n          onSetLike: onSetLike,\n          isMyComment: comment.user.id === (user === null || user === void 0 ? void 0 : user.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }, _this), comment.comments.map(function (childrenComment) {\n          return /*#__PURE__*/_jsxDEV(PostComment, {\n            onSetLike: onSetLike,\n            isChildren: true,\n            comment: childrenComment,\n            onReplyComment: onReplyComment,\n            isMyComment: comment.user.id === (user === null || user === void 0 ? void 0 : user.id)\n          }, childrenComment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 66\n          }, _this);\n        })]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(CommentList, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\n_c = CommentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"sources":["C:/Projects/projects/frontend/components/CommentList/index.tsx"],"names":["React","PostComment","useSelector","selectUserState","CommentList","comments","onReplyComment","onSetLike","user","map","comment","id","childrenComment"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAkD;AAAA;;AAAA,MAAhDC,QAAgD,QAAhDA,QAAgD;AAAA,MAAtCC,cAAsC,QAAtCA,cAAsC;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AACzE,MAAMC,IAAI,GAAGN,WAAW,CAACC,eAAD,CAAX,CAA6B,MAA7B,CAAb;AACA,sBACI;AAAA,cACKE,QAAQ,CAACI,GAAT,CAAa,UAAAC,OAAO,EAAI;AACrB,0BACI;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,cAAc,EAAEJ,cAA7B;AAA6C,UAAA,OAAO,EAAEI,OAAtD;AAA+D,UAAA,SAAS,EAAEH,SAA1E;AAAqF,UAAA,WAAW,EAAEG,OAAO,CAACF,IAAR,CAAaG,EAAb,MAAoBH,IAApB,aAAoBA,IAApB,uBAAoBA,IAAI,CAAEG,EAA1B;AAAlG;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEKD,OAAO,CAACL,QAAR,CAAiBI,GAAjB,CAAqB,UAAAG,eAAe;AAAA,8BAAI,QAAC,WAAD;AACrC,YAAA,SAAS,EAAEL,SAD0B;AAEZ,YAAA,UAAU,MAFE;AAGrC,YAAA,OAAO,EAAEK,eAH4B;AAIrC,YAAA,cAAc,EAAEN,cAJqB;AAKrC,YAAA,WAAW,EAAEI,OAAO,CAACF,IAAR,CAAaG,EAAb,MAAoBH,IAApB,aAAoBA,IAApB,uBAAoBA,IAAI,CAAEG,EAA1B;AALwB,aAEhCC,eAAe,CAACD,EAFgB;AAAA;AAAA;AAAA;AAAA,mBAAJ;AAAA,SAApC,CAFL;AAAA,SAAUD,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,eADJ;AAYH,KAbA;AADL;AAAA;AAAA;AAAA;AAAA,WADJ;AAkBH,CApBM;;GAAMP,W;UACIF,W;;;KADJE,W","sourcesContent":["import React from \"react\";\r\nimport {PostComment} from \"../PostComment\";\r\nimport {Comment} from \"../../interfaces\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUserState} from \"../../redux/user/user.selector\";\r\n\r\ntype Props = {\r\n    comments: Comment[];\r\n    onReplyComment: (text: string, userId: number, parentId: number) => void;\r\n    onSetLike: (commentId: number, like: unknown) => void\r\n}\r\n\r\nexport const CommentList = ({comments, onReplyComment, onSetLike}: Props) => {\r\n    const user = useSelector(selectUserState)['data'];\r\n    return (\r\n        <div>\r\n            {comments.map(comment => {\r\n                return (\r\n                    <div key={comment.id}>\r\n                        <PostComment onReplyComment={onReplyComment} comment={comment} onSetLike={onSetLike} isMyComment={comment.user.id === user?.id}/>\r\n                        {comment.comments.map(childrenComment => <PostComment\r\n                            onSetLike={onSetLike}\r\n                            key={childrenComment.id} isChildren\r\n                            comment={childrenComment}\r\n                            onReplyComment={onReplyComment}\r\n                            isMyComment={comment.user.id === user?.id}\r\n                        />)}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}