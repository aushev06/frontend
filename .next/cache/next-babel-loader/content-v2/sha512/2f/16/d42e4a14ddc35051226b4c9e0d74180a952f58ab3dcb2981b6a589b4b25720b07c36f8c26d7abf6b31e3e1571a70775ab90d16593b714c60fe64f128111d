{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\pages\\\\profile\\\\[id].tsx\";\nimport React, { useState } from 'react';\nimport { MainLayout } from \"../../layouts/MainLayout\";\nimport UserCard from \"../../components/UserCard\";\nimport { useRouter } from \"next/router\";\nimport { getPosts } from \"../../services/api/PostApi\";\nimport { MiniPost } from \"../../components/MiniPost\";\nimport { useSelector } from \"react-redux\";\nimport { selectUserState } from \"../../redux/user/user.selector\";\nimport { setLike } from \"../../services/api/LikeApi\";\nimport { UserApi } from \"../../services/api/UserApi\";\nimport { CommentApi } from \"../../services/api/CommentApi\";\nimport { LoadMore } from \"../../components/LoadMore\";\nexport default function Profile(props) {\n  var _posts$meta, _posts$data;\n\n  const {\n    0: user,\n    1: setUser\n  } = useState(props.user);\n  const authUser = useSelector(selectUserState)['data'];\n  const router = useRouter();\n  const {\n    id,\n    type\n  } = router.query;\n  const types = {\n    drafts: 'draft',\n    articles: 'active'\n  };\n  const [posts, setPosts] = React.useState(props.posts);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [skipUseEffect, setSkipUseEffect] = React.useState(true);\n  const {\n    0: page,\n    1: setPage\n  } = useState(props.posts.meta.current_page);\n  const {\n    0: maxPage,\n    1: setMaxPage\n  } = useState(props.posts.meta.last_page);\n  React.useEffect(() => {\n    setSkipUseEffect(false);\n\n    if (!skipUseEffect) {\n      setIsLoading(true);\n\n      const effect = async () => {\n        const responsePosts = await getPosts({\n          user_ids: id,\n          status: types[type],\n          page\n        });\n        setPosts(responsePosts);\n        setIsLoading(false);\n      };\n\n      effect();\n    }\n  }, [type, page]);\n\n  const onTypeChange = async t => {\n    const posts = await getPosts({\n      status: types[t]\n    });\n    setPosts(posts);\n  };\n\n  const handleSetLike = async (postId, like) => {\n    await setLike(postId, 'post', like);\n  };\n\n  if (isLoading || posts === {}) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: [/*#__PURE__*/_jsxDEV(UserCard, {\n      nickname: user === null || user === void 0 ? void 0 : user.name,\n      profession: user === null || user === void 0 ? void 0 : user.position,\n      status: user === null || user === void 0 ? void 0 : user.description,\n      sinceDate: user === null || user === void 0 ? void 0 : user.created_at,\n      commentsCount: user === null || user === void 0 ? void 0 : user.comments_count,\n      readyForWork: user === null || user === void 0 ? void 0 : user.ready_for_work,\n      articleType: type || 'articles',\n      onChangeType: onTypeChange,\n      isAuthUser: (authUser === null || authUser === void 0 ? void 0 : authUser.id) === user.id,\n      recognized: !!user.recognized,\n      avatar: user.avatar,\n      postCount: posts === null || posts === void 0 ? void 0 : (_posts$meta = posts.meta) === null || _posts$meta === void 0 ? void 0 : _posts$meta.total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'content mt-15 m-15',\n      children: [posts === null || posts === void 0 ? void 0 : (_posts$data = posts.data) === null || _posts$data === void 0 ? void 0 : _posts$data.map(post => {\n        return /*#__PURE__*/_jsxDEV(MiniPost, {\n          postData: {\n            commentsCount: post.comments_count,\n            description: post.description,\n            dislikesCount: post.dislikes_count,\n            likesCount: post.likes_count,\n            title: post.title,\n            viewsCount: post.views,\n            slug: post.slug,\n            user: {\n              avatarUrl: post.user.avatar,\n              id: post.user.id,\n              name: post.user.name\n            },\n            imageUrl: post.img,\n            id: post.id,\n            tags: [],\n            time: new Date(post.updated_at),\n            vote: post === null || post === void 0 ? void 0 : post.liked_type\n          },\n          onSetLike: handleSetLike\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 28\n        }, this);\n      }), !isLoading && page !== maxPage && /*#__PURE__*/_jsxDEV(LoadMore, {\n        onClick: () => setPage(page + 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\nexport async function getServerSideProps(ctx) {\n  const posts = await getPosts({\n    user_ids: ctx.query.id\n  });\n  const comments = await CommentApi.get({\n    user_ids: ctx.query.id\n  });\n  return {\n    props: {\n      user: await UserApi.show(ctx.query.id),\n      posts,\n      comments\n    }\n  };\n}","map":{"version":3,"sources":["C:/Projects/projects/frontend/pages/profile/[id].tsx"],"names":["React","useState","MainLayout","UserCard","useRouter","getPosts","MiniPost","useSelector","selectUserState","setLike","UserApi","CommentApi","LoadMore","Profile","props","user","setUser","authUser","router","id","type","query","types","drafts","articles","posts","setPosts","isLoading","setIsLoading","skipUseEffect","setSkipUseEffect","page","setPage","meta","current_page","maxPage","setMaxPage","last_page","useEffect","effect","responsePosts","user_ids","status","onTypeChange","t","handleSetLike","postId","like","name","position","description","created_at","comments_count","ready_for_work","recognized","avatar","total","data","map","post","commentsCount","dislikesCount","dislikes_count","likesCount","likes_count","title","viewsCount","views","slug","avatarUrl","imageUrl","img","tags","time","Date","updated_at","vote","liked_type","getServerSideProps","ctx","comments","get","show"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {MainLayout} from \"../../layouts/MainLayout\";\r\nimport UserCard from \"../../components/UserCard\";\r\nimport {useRouter} from \"next/router\";\r\nimport {getPostComments, getPosts, showPost} from \"../../services/api/PostApi\";\r\nimport {MiniPost} from \"../../components/MiniPost\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUserState} from \"../../redux/user/user.selector\";\r\nimport {setLike} from \"../../services/api/LikeApi\";\r\nimport {Pagination, PostData, User} from \"../../interfaces\";\r\nimport {UserApi} from \"../../services/api/UserApi\";\r\nimport {CommentApi} from \"../../services/api/CommentApi\";\r\nimport {LoadMore} from \"../../components/LoadMore\";\r\n\r\n\r\nexport default function Profile(props) {\r\n    const [user, setUser] = useState<User>(props.user);\r\n    const authUser = useSelector(selectUserState)['data'];\r\n    const router = useRouter()\r\n    const {id, type} = router.query\r\n    const types = {\r\n        drafts: 'draft',\r\n        articles: 'active'\r\n    }\r\n\r\n    const [posts, setPosts] = React.useState<Partial<Pagination<PostData>>>(props.posts)\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [skipUseEffect, setSkipUseEffect] = React.useState(true);\r\n\r\n    const [page, setPage] = useState(props.posts.meta.current_page)\r\n    const [maxPage, setMaxPage] = useState(props.posts.meta.last_page)\r\n\r\n    React.useEffect(() => {\r\n        setSkipUseEffect(false);\r\n\r\n        if (!skipUseEffect) {\r\n            setIsLoading(true)\r\n            const effect = async () => {\r\n                const responsePosts = await getPosts({user_ids: id, status: types[type as string], page});\r\n                setPosts(responsePosts)\r\n                setIsLoading(false);\r\n            }\r\n\r\n            effect();\r\n        }\r\n\r\n    }, [type, page])\r\n\r\n    const onTypeChange = async (t: string) => {\r\n        const posts = await getPosts({status: types[t]});\r\n        setPosts(posts)\r\n    }\r\n\r\n    const handleSetLike = async (postId: number, like?: 'like' | 'dislike') => {\r\n        await setLike(postId, 'post', like);\r\n    }\r\n\r\n    if (isLoading || posts === {}) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <MainLayout>\r\n            <UserCard nickname={user?.name}\r\n                      profession={user?.position}\r\n                      status={user?.description}\r\n                      sinceDate={user?.created_at}\r\n                      commentsCount={user?.comments_count}\r\n                      readyForWork={user?.ready_for_work}\r\n                      articleType={type as string || 'articles' as string}\r\n                      onChangeType={onTypeChange}\r\n                      isAuthUser={authUser?.id === user.id}\r\n                      recognized={!!user.recognized}\r\n                      avatar={user.avatar}\r\n                      postCount={posts?.meta?.total}\r\n\r\n            />\r\n\r\n\r\n            <div className={'content mt-15 m-15'}>\r\n                {posts?.data?.map(post => {\r\n                    return <MiniPost\r\n                        key={post.id}\r\n                        postData={{\r\n                            commentsCount: post.comments_count,\r\n                            description: post.description,\r\n                            dislikesCount: post.dislikes_count,\r\n                            likesCount: post.likes_count,\r\n                            title: post.title,\r\n                            viewsCount: post.views,\r\n                            slug: post.slug,\r\n                            user: {\r\n                                avatarUrl: post.user.avatar,\r\n                                id: post.user.id,\r\n                                name: post.user.name,\r\n                            },\r\n                            imageUrl: post.img,\r\n                            id: post.id,\r\n                            tags: [],\r\n                            time: new Date(post.updated_at),\r\n                            vote: post?.liked_type,\r\n                        }}\r\n                        onSetLike={handleSetLike}\r\n                    />;\r\n                })}\r\n\r\n                {!isLoading && page !== maxPage && (\r\n                    <LoadMore onClick={() => setPage(page + 1)}/>\r\n                )}\r\n\r\n            </div>\r\n\r\n        </MainLayout>\r\n    )\r\n}\r\n\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const posts = await getPosts({user_ids: ctx.query.id})\r\n    const comments = await CommentApi.get({user_ids: ctx.query.id})\r\n    return {\r\n        props: {\r\n            user: await UserApi.show(ctx.query.id),\r\n            posts,\r\n            comments,\r\n        },\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}