{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Projects/projects/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Projects/projects/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\pages\\\\tags\\\\[slug].tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useAllMQ } from \"../../utils/useAllMQ\";\nimport { setLike } from \"../../services/api/LikeApi\";\nimport { MainLayout } from \"../../layouts/MainLayout\";\nimport { MiniPost } from \"../../components/MiniPost\";\nimport { getPosts } from \"../../services/api/PostApi\";\nimport { LoadMore } from \"../../components/LoadMore\";\nexport var __N_SSP = true;\nexport default function Home(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var mq = useAllMQ();\n\n  var handleSetLike = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(postId, like) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return setLike(postId, 'post', like);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSetLike(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useState2 = useState(props.posts),\n      posts = _useState2[0],\n      setPosts = _useState2[1];\n\n  var _useState3 = useState(props.posts.meta.current_page),\n      page = _useState3[0],\n      setPage = _useState3[1];\n\n  var _useState4 = useState(props.posts.meta.last_page),\n      maxPage = _useState4[0],\n      setMaxPage = _useState4[1];\n\n  React.useEffect(function () {\n    var runEffect = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = setPosts;\n                _context2.next = 3;\n                return getPosts({\n                  page: page\n                });\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                (0, _context2.t0)(_context2.t1);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function runEffect() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    runEffect();\n  }, [page]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: [!mq.isXS && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-side\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [isLoading && 'Загрука...', !isLoading && (posts === null || posts === void 0 ? void 0 : posts.data.map(function (post, key) {\n            return /*#__PURE__*/_jsxDEV(MiniPost, {\n              postData: {\n                commentsCount: post.comments_count,\n                description: post.description,\n                dislikesCount: post.dislikes_count,\n                likesCount: post.likes_count,\n                title: post.title,\n                viewsCount: post.views,\n                slug: post.slug,\n                user: {\n                  avatarUrl: post.user.avatar,\n                  id: post.user.id,\n                  name: post.user.name\n                },\n                imageUrl: post.img,\n                id: post.id,\n                tags: [],\n                time: new Date(post.updated_at),\n                vote: post === null || post === void 0 ? void 0 : post.liked_type\n              },\n              onSetLike: handleSetLike\n            }, post.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 36\n            }, _this);\n          })), !isLoading && page !== maxPage && /*#__PURE__*/_jsxDEV(LoadMore, {\n            onClick: function onClick() {\n              return setPage(page + 1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), !mq.isXS && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-side\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"QiljGZLp/Yzj0SwulOwAQb0du40=\", false, function () {\n  return [useAllMQ];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Projects/projects/frontend/pages/tags/[slug].tsx"],"names":["React","useState","useAllMQ","setLike","MainLayout","MiniPost","getPosts","LoadMore","Home","props","isLoading","setIsLoading","mq","handleSetLike","postId","like","posts","setPosts","meta","current_page","page","setPage","last_page","maxPage","setMaxPage","useEffect","runEffect","isXS","data","map","post","key","commentsCount","comments_count","description","dislikesCount","dislikes_count","likesCount","likes_count","title","viewsCount","views","slug","user","avatarUrl","avatar","id","name","imageUrl","img","tags","time","Date","updated_at","vote","liked_type"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useAllMQ} from \"../../utils/useAllMQ\";\r\nimport {setLike} from \"../../services/api/LikeApi\";\r\nimport {MainLayout} from \"../../layouts/MainLayout\";\r\nimport {MiniPost} from \"../../components/MiniPost\";\r\nimport {Pagination, PostData} from \"../../interfaces\";\r\nimport {getPosts, showPost} from \"../../services/api/PostApi\";\r\nimport {getCategories} from \"../../services/api/CategoryApi\";\r\nimport {LoadMore} from \"../../components/LoadMore\";\r\n\r\n\r\nexport default function Home(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const mq = useAllMQ()\r\n\r\n    const handleSetLike = async (postId: number, like?: 'like' | 'dislike') => {\r\n        await setLike(postId, 'post', like)\r\n    }\r\n\r\n\r\n    const [posts, setPosts] = useState<Pagination<PostData>>(props.posts);\r\n    const [page, setPage] = useState(props.posts.meta.current_page)\r\n    const [maxPage, setMaxPage] = useState(props.posts.meta.last_page)\r\n\r\n\r\n    React.useEffect(() => {\r\n        const runEffect = async () => {\r\n            setPosts(await getPosts({page}))\r\n        }\r\n\r\n        runEffect();\r\n\r\n    }, [page])\r\n\r\n    return (\r\n        <main>\r\n            <MainLayout>\r\n                <div className=\"wrapper\">\r\n\r\n                    {!mq.isXS && (\r\n                        <div className=\"left-side\">\r\n\r\n                        </div>\r\n                    )}\r\n\r\n\r\n                    <div className=\"content\">\r\n\r\n                        {isLoading && 'Загрука...'}\r\n\r\n                        {!isLoading && posts?.data.map((post, key) => {\r\n                            return <MiniPost\r\n                                key={post.id}\r\n                                postData={{\r\n                                    commentsCount: post.comments_count,\r\n                                    description: post.description,\r\n                                    dislikesCount: post.dislikes_count,\r\n                                    likesCount: post.likes_count,\r\n                                    title: post.title,\r\n                                    viewsCount: post.views,\r\n                                    slug: post.slug,\r\n                                    user: {\r\n                                        avatarUrl: post.user.avatar,\r\n                                        id: post.user.id,\r\n                                        name: post.user.name,\r\n                                    },\r\n                                    imageUrl: post.img,\r\n                                    id: post.id,\r\n                                    tags: [],\r\n                                    time: new Date(post.updated_at),\r\n                                    vote: post?.liked_type,\r\n                                }}\r\n                                onSetLike={handleSetLike}\r\n                            />;\r\n                        })}\r\n\r\n                        {!isLoading && page !== maxPage && (\r\n                            <LoadMore onClick={() => setPage(page + 1)}/>\r\n                        )}\r\n\r\n                    </div>\r\n                    {!mq.isXS && (\r\n                        <div className=\"right-side\">\r\n\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </MainLayout>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const posts = await getPosts({categories: ctx.query?.slug}, ctx.req.cookies?.auth_token);\r\n\r\n    return {\r\n        props: {\r\n            posts\r\n        },\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}