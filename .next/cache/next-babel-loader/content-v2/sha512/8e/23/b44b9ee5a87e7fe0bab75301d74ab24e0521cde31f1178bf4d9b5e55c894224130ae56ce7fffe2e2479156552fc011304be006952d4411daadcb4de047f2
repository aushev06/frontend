{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Projects/projects/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Projects/projects/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Projects/projects/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\pages\\\\profile\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MainLayout } from \"../../layouts/MainLayout\";\nimport UserCard from \"../../components/UserCard\";\nimport { useRouter } from \"next/router\";\nimport { getPosts } from \"../../services/api/PostApi\";\nimport { MiniPost } from \"../../components/MiniPost\";\nimport { useSelector } from \"react-redux\";\nimport { selectUserState } from \"../../redux/user/user.selector\";\nimport { setLike } from \"../../services/api/LikeApi\";\nexport var __N_SSP = true;\nexport default function Profile(props) {\n  _s();\n\n  var _posts$meta,\n      _posts$data,\n      _this = this;\n\n  var _useState = useState(props.user),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var authUser = useSelector(selectUserState)['data'];\n  var router = useRouter();\n  var _router$query = router.query,\n      id = _router$query.id,\n      type = _router$query.type;\n  var types = {\n    drafts: 'draft',\n    articles: 'active'\n  };\n\n  var _React$useState = React.useState(props.posts),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      posts = _React$useState2[0],\n      setPosts = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setIsLoading = _React$useState4[1];\n\n  React.useEffect(function () {\n    setIsLoading(true);\n\n    var effect = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var responsePosts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getPosts({\n                  user_ids: id,\n                  status: types[type]\n                });\n\n              case 2:\n                responsePosts = _context.sent;\n                setPosts(responsePosts);\n                setIsLoading(false);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function effect() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    effect();\n  }, [type]);\n\n  var onTypeChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(t) {\n      var posts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getPosts({\n                status: types[t]\n              });\n\n            case 2:\n              posts = _context2.sent;\n              setPosts(posts);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onTypeChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSetLike = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(postId, like) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return setLike(postId, 'post', like);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleSetLike(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  if (isLoading || posts === {}) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: [/*#__PURE__*/_jsxDEV(UserCard, {\n      nickname: user === null || user === void 0 ? void 0 : user.name,\n      profession: user === null || user === void 0 ? void 0 : user.position,\n      status: user === null || user === void 0 ? void 0 : user.description,\n      sinceDate: user === null || user === void 0 ? void 0 : user.created_at,\n      commentsCount: user === null || user === void 0 ? void 0 : user.comments_count,\n      readyForWork: user === null || user === void 0 ? void 0 : user.ready_for_work,\n      articleType: type || 'articles',\n      onChangeType: onTypeChange,\n      isAuthUser: (authUser === null || authUser === void 0 ? void 0 : authUser.id) === user.id,\n      recognized: !!user.recognized,\n      avatar: user.avatar,\n      postCount: posts === null || posts === void 0 ? void 0 : (_posts$meta = posts.meta) === null || _posts$meta === void 0 ? void 0 : _posts$meta.total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'content mt-15 m-15',\n      children: posts === null || posts === void 0 ? void 0 : (_posts$data = posts.data) === null || _posts$data === void 0 ? void 0 : _posts$data.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(MiniPost, {\n          postData: {\n            commentsCount: post.comments_count,\n            description: post.description,\n            dislikesCount: post.dislikes_count,\n            likesCount: post.likes_count,\n            title: post.title,\n            viewsCount: post.views,\n            slug: post.slug,\n            user: {\n              avatarUrl: post.user.avatar,\n              id: post.user.id,\n              name: post.user.name\n            },\n            imageUrl: post.img,\n            id: post.id,\n            tags: [],\n            time: new Date(post.updated_at),\n            vote: post === null || post === void 0 ? void 0 : post.liked_type\n          },\n          onSetLike: handleSetLike\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 28\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"bYCTj9dhx7sr2eD61Hgj5EftSyA=\", false, function () {\n  return [useSelector, useRouter];\n});\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Projects/projects/frontend/pages/profile/[id].tsx"],"names":["React","useState","MainLayout","UserCard","useRouter","getPosts","MiniPost","useSelector","selectUserState","setLike","Profile","props","user","setUser","authUser","router","query","id","type","types","drafts","articles","posts","setPosts","isLoading","setIsLoading","useEffect","effect","user_ids","status","responsePosts","onTypeChange","t","handleSetLike","postId","like","name","position","description","created_at","comments_count","ready_for_work","recognized","avatar","meta","total","data","map","post","commentsCount","dislikesCount","dislikes_count","likesCount","likes_count","title","viewsCount","views","slug","avatarUrl","imageUrl","img","tags","time","Date","updated_at","vote","liked_type"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {MainLayout} from \"../../layouts/MainLayout\";\r\nimport UserCard from \"../../components/UserCard\";\r\nimport {useRouter} from \"next/router\";\r\nimport {getPostComments, getPosts, showPost} from \"../../services/api/PostApi\";\r\nimport {MiniPost} from \"../../components/MiniPost\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUserState} from \"../../redux/user/user.selector\";\r\nimport {setLike} from \"../../services/api/LikeApi\";\r\nimport {Pagination, PostData, User} from \"../../interfaces\";\r\nimport {UserApi} from \"../../services/api/UserApi\";\r\nimport {CommentApi} from \"../../services/api/CommentApi\";\r\n\r\n\r\nexport default function Profile(props) {\r\n    const [user, setUser] = useState<User>(props.user);\r\n    const authUser = useSelector(selectUserState)['data'];\r\n    const router = useRouter()\r\n    const {id, type} = router.query\r\n    const types = {\r\n        drafts: 'draft',\r\n        articles: 'active'\r\n    }\r\n\r\n    const [posts, setPosts] = React.useState<Partial<Pagination<PostData>>>(props.posts)\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true)\r\n        const effect = async () => {\r\n            const responsePosts = await getPosts({user_ids: id, status: types[type as string]});\r\n            setPosts(responsePosts)\r\n            setIsLoading(false);\r\n        }\r\n\r\n        effect();\r\n\r\n    }, [type])\r\n\r\n    const onTypeChange = async (t: string) => {\r\n        const posts = await getPosts({status: types[t]});\r\n        setPosts(posts)\r\n    }\r\n\r\n    const handleSetLike = async (postId: number, like?: 'like' | 'dislike') => {\r\n        await setLike(postId, 'post', like);\r\n    }\r\n\r\n    if (isLoading || posts === {}) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <MainLayout>\r\n            <UserCard nickname={user?.name}\r\n                      profession={user?.position}\r\n                      status={user?.description}\r\n                      sinceDate={user?.created_at}\r\n                      commentsCount={user?.comments_count}\r\n                      readyForWork={user?.ready_for_work}\r\n                      articleType={type as string || 'articles' as string}\r\n                      onChangeType={onTypeChange}\r\n                      isAuthUser={authUser?.id === user.id}\r\n                      recognized={!!user.recognized}\r\n                      avatar={user.avatar}\r\n                      postCount={posts?.meta?.total}\r\n\r\n            />\r\n\r\n\r\n            <div className={'content mt-15 m-15'}>\r\n                {posts?.data?.map(post => {\r\n                    return <MiniPost\r\n                        key={post.id}\r\n                        postData={{\r\n                            commentsCount: post.comments_count,\r\n                            description: post.description,\r\n                            dislikesCount: post.dislikes_count,\r\n                            likesCount: post.likes_count,\r\n                            title: post.title,\r\n                            viewsCount: post.views,\r\n                            slug: post.slug,\r\n                            user: {\r\n                                avatarUrl: post.user.avatar,\r\n                                id: post.user.id,\r\n                                name: post.user.name,\r\n                            },\r\n                            imageUrl: post.img,\r\n                            id: post.id,\r\n                            tags: [],\r\n                            time: new Date(post.updated_at),\r\n                            vote: post?.liked_type,\r\n                        }}\r\n                        onSetLike={handleSetLike}\r\n                    />;\r\n                })}\r\n            </div>\r\n\r\n        </MainLayout>\r\n    )\r\n}\r\n\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const posts = await getPosts({user_ids: ctx.query.id})\r\n    const comments = await CommentApi.get({user_ids: ctx.query.id})\r\n    return {\r\n        props: {\r\n            user: await UserApi.show(ctx.query.id),\r\n            posts,\r\n            comments,\r\n        },\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}