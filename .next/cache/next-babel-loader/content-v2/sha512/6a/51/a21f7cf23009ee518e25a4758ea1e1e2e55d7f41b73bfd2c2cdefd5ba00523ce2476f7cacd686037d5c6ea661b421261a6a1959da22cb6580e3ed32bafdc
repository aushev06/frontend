{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\pages\\\\profile\\\\[id].tsx\";\nimport React, { useState } from 'react';\nimport { MainLayout } from \"../../layouts/MainLayout\";\nimport UserCard from \"../../components/UserCard\";\nimport { useRouter } from \"next/router\";\nimport { getPosts } from \"../../services/api/PostApi\";\nimport { MiniPost } from \"../../components/MiniPost\";\nimport { useSelector } from \"react-redux\";\nimport { selectUserState } from \"../../redux/user/user.selector\";\nimport { setLike } from \"../../services/api/LikeApi\";\nimport { UserApi } from \"../../services/api/UserApi\";\nexport default function Profile(props) {\n  var _posts$meta, _posts$data;\n\n  const {\n    0: user,\n    1: setUser\n  } = useState(props.user);\n  const [authUser] = useSelector(selectUserState)['data'];\n  const router = useRouter();\n  const {\n    id,\n    type\n  } = router.query;\n  const types = {\n    drafts: 'draft',\n    articles: 'active'\n  };\n  const [posts, setPosts] = React.useState({});\n  const [isLoading, setIsLoading] = React.useState(false);\n  React.useEffect(() => {\n    setIsLoading(true);\n\n    const effect = async () => {\n      const responsePosts = await getPosts({\n        user_ids: id,\n        status: types[type]\n      });\n      setPosts(responsePosts);\n      setIsLoading(false);\n      console.log(responsePosts);\n    };\n\n    effect();\n  }, [type]);\n\n  const onTypeChange = async t => {\n    const posts = await getPosts({\n      status: types[t]\n    });\n    setPosts(posts);\n  };\n\n  const handleSetLike = async (postId, like) => {\n    await setLike(postId, 'post', like);\n  };\n\n  if (isLoading || posts === {}) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: [/*#__PURE__*/_jsxDEV(UserCard, {\n      nickname: user === null || user === void 0 ? void 0 : user.name,\n      profession: user === null || user === void 0 ? void 0 : user.position,\n      status: user === null || user === void 0 ? void 0 : user.description,\n      sinceDate: user === null || user === void 0 ? void 0 : user.created_at,\n      commentsCount: user === null || user === void 0 ? void 0 : user.comments_count,\n      readyForWork: user === null || user === void 0 ? void 0 : user.ready_for_work,\n      articleType: type || 'articles',\n      onChangeType: onTypeChange,\n      isAuthUser: (authUser === null || authUser === void 0 ? void 0 : authUser.id) === user.id,\n      recognized: !!user.recognized,\n      avatar: user.avatar,\n      postCount: posts === null || posts === void 0 ? void 0 : (_posts$meta = posts.meta) === null || _posts$meta === void 0 ? void 0 : _posts$meta.total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'content mt-15 m-15',\n      children: posts === null || posts === void 0 ? void 0 : (_posts$data = posts.data) === null || _posts$data === void 0 ? void 0 : _posts$data.map(post => {\n        return /*#__PURE__*/_jsxDEV(MiniPost, {\n          postData: {\n            commentsCount: post.comments_count,\n            description: post.description,\n            dislikesCount: post.dislikes_count,\n            likesCount: post.likes_count,\n            title: post.title,\n            viewsCount: post.views,\n            slug: post.slug,\n            user: {\n              avatarUrl: post.user.avatar,\n              id: post.user.id,\n              name: post.user.name\n            },\n            imageUrl: post.img,\n            id: post.id,\n            tags: [],\n            time: new Date(post.updated_at),\n            vote: post === null || post === void 0 ? void 0 : post.liked_type\n          },\n          onSetLike: handleSetLike\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\nexport async function getServerSideProps(ctx) {\n  return {\n    props: {\n      user: await UserApi.show(ctx.query.id)\n    }\n  };\n}","map":{"version":3,"sources":["C:/Projects/projects/frontend/pages/profile/[id].tsx"],"names":["React","useState","MainLayout","UserCard","useRouter","getPosts","MiniPost","useSelector","selectUserState","setLike","UserApi","Profile","props","user","setUser","authUser","router","id","type","query","types","drafts","articles","posts","setPosts","isLoading","setIsLoading","useEffect","effect","responsePosts","user_ids","status","console","log","onTypeChange","t","handleSetLike","postId","like","name","position","description","created_at","comments_count","ready_for_work","recognized","avatar","meta","total","data","map","post","commentsCount","dislikesCount","dislikes_count","likesCount","likes_count","title","viewsCount","views","slug","avatarUrl","imageUrl","img","tags","time","Date","updated_at","vote","liked_type","getServerSideProps","ctx","show"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {MainLayout} from \"../../layouts/MainLayout\";\r\nimport UserCard from \"../../components/UserCard\";\r\nimport {useRouter} from \"next/router\";\r\nimport {getPostComments, getPosts, showPost} from \"../../services/api/PostApi\";\r\nimport {MiniPost} from \"../../components/MiniPost\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectUserState} from \"../../redux/user/user.selector\";\r\nimport {setLike} from \"../../services/api/LikeApi\";\r\nimport {Pagination, PostData, User} from \"../../interfaces\";\r\nimport {UserApi} from \"../../services/api/UserApi\";\r\n\r\n\r\nexport default function Profile (props) {\r\n    const [user, setUser] = useState<User>(props.user);\r\n    const [authUser] = useSelector(selectUserState)['data'];\r\n    const router = useRouter()\r\n    const { id, type } = router.query\r\n    const types = {\r\n        drafts: 'draft',\r\n        articles: 'active'\r\n    }\r\n\r\n    const [posts, setPosts] = React.useState<Partial<Pagination<PostData>>>({})\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true)\r\n        const effect = async () => {\r\n            const responsePosts = await getPosts({user_ids: id, status: types[type as string]});\r\n            setPosts(responsePosts)\r\n            setIsLoading(false);\r\n            console.log(responsePosts)\r\n        }\r\n\r\n        effect();\r\n\r\n    }, [type])\r\n\r\n    const onTypeChange = async (t: string) => {\r\n        const posts = await getPosts({status: types[t]});\r\n        setPosts(posts)\r\n    }\r\n\r\n    const handleSetLike = async (postId: number, like?: 'like' | 'dislike') => {\r\n        await setLike(postId, 'post', like);\r\n    }\r\n\r\n    if (isLoading || posts === {}) {\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <MainLayout>\r\n            <UserCard nickname={user?.name}\r\n                      profession={user?.position}\r\n                      status={user?.description}\r\n                      sinceDate={user?.created_at}\r\n                      commentsCount={user?.comments_count}\r\n                      readyForWork={user?.ready_for_work}\r\n                      articleType={type as string || 'articles' as string}\r\n                      onChangeType={onTypeChange}\r\n                      isAuthUser={authUser?.id === user.id}\r\n                      recognized={!!user.recognized}\r\n                      avatar={user.avatar}\r\n                      postCount={posts?.meta?.total}\r\n\r\n            />\r\n\r\n\r\n           <div className={'content mt-15 m-15'}>\r\n               {posts?.data?.map(post => {\r\n                   return  <MiniPost\r\n                       key={post.id}\r\n                       postData={{\r\n                           commentsCount: post.comments_count,\r\n                           description: post.description,\r\n                           dislikesCount: post.dislikes_count,\r\n                           likesCount: post.likes_count,\r\n                           title: post.title,\r\n                           viewsCount: post.views,\r\n                           slug: post.slug,\r\n                           user: {\r\n                               avatarUrl: post.user.avatar,\r\n                               id: post.user.id,\r\n                               name: post.user.name,\r\n                           },\r\n                           imageUrl: post.img,\r\n                           id: post.id,\r\n                           tags: [],\r\n                           time: new Date(post.updated_at),\r\n                           vote: post?.liked_type,\r\n                       }}\r\n                    onSetLike={handleSetLike}\r\n                   />;\r\n               })}\r\n           </div>\r\n\r\n        </MainLayout>\r\n    )\r\n}\r\n\r\n\r\nexport async function getServerSideProps(ctx) {\r\n\r\n    return {\r\n        props: {\r\n            user: await UserApi.show(ctx.query.id)\r\n        },\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}