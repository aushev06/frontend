{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\pages\\\\post\\\\[slug].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { MainLayout } from '../../layouts/MainLayout';\nimport { FullPost } from '../../components/FullPost';\nimport { getPostComments, showPost } from \"../../services/api/PostApi\";\nimport { AddCommentBlock } from \"../../components/AddCommentBlock\";\nimport { CommentApi } from \"../../services/api/CommentApi\";\nimport { CommentList } from \"../../components/CommentList\";\nimport { setLike } from \"../../services/api/LikeApi\";\nimport { SideBlock } from \"../../components/SideBlock\";\nimport { MenuList } from \"../../components/MenuList\";\nimport { Tags } from \"../../components/Tags\";\nimport { useSelector } from \"react-redux\";\nimport { selectCategoriesState, selectThemesState } from \"../../redux/directory/directory.selector\";\nimport { useAllMQ } from \"../../utils/useAllMQ\";\nimport { echo } from \"../../utils/echo\";\nimport { useAlert } from \"../../hooks/useAlert\";\nimport { selectUserState } from \"../../redux/user/user.selector\";\nexport const PostContext = /*#__PURE__*/React.createContext({});\nexport default function Post({\n  post,\n  serverSideComments\n}) {\n  const mq = useAllMQ();\n  const {\n    0: selectedThemes,\n    1: setSelectedThemes\n  } = useState([]);\n  const {\n    0: comments,\n    1: setComments\n  } = useState(serverSideComments);\n  const themes = useSelector(selectThemesState);\n  const categories = useSelector(selectCategoriesState);\n  const {\n    openAlert\n  } = useAlert();\n  const user = useSelector(selectUserState)['data'];\n\n  const handleSelectTheme = async t => {\n    setSelectedThemes(() => [...selectedThemes, t]);\n  };\n\n  const onAddComment = async (text, toUserId, parentId, commentId) => {\n    await CommentApi.save(post.id, text, toUserId, parentId, commentId);\n  };\n\n  const handleCommentSetLike = async (id, like) => {\n    await setLike(id, 'comment', like);\n  };\n\n  const handleSetLike = async (postId, like) => {\n    await setLike(postId, 'post', like);\n  };\n\n  React.useEffect(() => {\n    if (false) {\n      echo().channel('ingternet-comments_' + (post === null || post === void 0 ? void 0 : post.id)).listen('.new-comment', comment => {\n        if (comment.user.id !== (user === null || user === void 0 ? void 0 : user.id)) {\n          openAlert('Появился новый комментарий!');\n        }\n\n        setComments(!comment.parent_id ? [comment, ...comments] : comments.map(item => {\n          if (comment.parent_id === item.id) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              comments: [...comment.comments, comment]\n            });\n          }\n\n          return item;\n        }));\n      });\n      echo().channel('ingternet-comments_' + (post === null || post === void 0 ? void 0 : post.id)).listen('.updated-comment', item => {\n        openAlert(`Пользователь ${item.user.name} изменил свой комментарий!`);\n        setComments(comments.map(comment => {\n          if (comment.id == item.id) {\n            return item;\n          }\n\n          return comment;\n        }));\n      });\n    }\n\n    return () => {\n      echo().leave('laravel_database_comments_' + (post === null || post === void 0 ? void 0 : post.id));\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper-center\",\n        children: [!mq.isXS && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'left-side-no-margin',\n          children: [/*#__PURE__*/_jsxDEV(SideBlock, {\n            children: /*#__PURE__*/_jsxDEV(MenuList, {\n              items: [{\n                name: 'Популярное',\n                url: '/popular',\n                icon: '/fire.svg',\n                isActive: true,\n                hasMore: true\n              }, {\n                name: 'Новое',\n                url: '/new',\n                icon: '/news.svg'\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SideBlock, {\n            name: \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\",\n            children: /*#__PURE__*/_jsxDEV(MenuList, {\n              items: categories.map(c => ({\n                name: c.name,\n                url: `/tags/${c.slug}`,\n                icon: `/${c.slug}.png`\n              }))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(SideBlock, {\n            name: \"\\u0422\\u0435\\u043C\\u044B\",\n            children: /*#__PURE__*/_jsxDEV(Tags, {\n              items: themes,\n              handleSelect: handleSelectTheme,\n              selectedItems: selectedThemes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(FullPost, {\n            post: post,\n            onSetLike: handleSetLike\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), post.status === 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'comments',\n            children: [/*#__PURE__*/_jsxDEV(AddCommentBlock, {\n              onAddComment: onAddComment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 15\n              },\n              children: /*#__PURE__*/_jsxDEV(CommentList, {\n                onSetLike: handleCommentSetLike,\n                comments: comments,\n                onReplyComment: onAddComment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\nexport async function getServerSideProps(ctx) {\n  var _ctx$req$cookies;\n\n  const response = await showPost(ctx.query.slug, (_ctx$req$cookies = ctx.req.cookies) === null || _ctx$req$cookies === void 0 ? void 0 : _ctx$req$cookies.auth_token);\n  const responseComments = await getPostComments(response.data.id, ctx.req.cookies.auth_token);\n  return {\n    props: {\n      post: response.data,\n      serverSideComments: responseComments\n    }\n  };\n}","map":{"version":3,"sources":["C:/Projects/projects/frontend/pages/post/[slug].tsx"],"names":["React","useState","MainLayout","FullPost","getPostComments","showPost","AddCommentBlock","CommentApi","CommentList","setLike","SideBlock","MenuList","Tags","useSelector","selectCategoriesState","selectThemesState","useAllMQ","echo","useAlert","selectUserState","PostContext","createContext","Post","post","serverSideComments","mq","selectedThemes","setSelectedThemes","comments","setComments","themes","categories","openAlert","user","handleSelectTheme","t","onAddComment","text","toUserId","parentId","commentId","save","id","handleCommentSetLike","like","handleSetLike","postId","useEffect","channel","listen","comment","parent_id","map","item","name","leave","isXS","url","icon","isActive","hasMore","c","slug","status","marginTop","getServerSideProps","ctx","response","query","req","cookies","auth_token","responseComments","data","props"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAAQC,eAAR,EAAyBC,QAAzB,QAAwC,4BAAxC;AAEA,SAAQC,eAAR,QAA8B,kCAA9B;AACA,SAAQC,UAAR,QAAyB,+BAAzB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAAQC,OAAR,QAAsB,4BAAtB;AACA,SAAQC,SAAR,QAAwB,4BAAxB;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAAQC,IAAR,QAAmB,uBAAnB;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,qBAAR,EAA+BC,iBAA/B,QAAuD,0CAAvD;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AAEA,OAAO,MAAMC,WAAW,gBAAGpB,KAAK,CAACqB,aAAN,CAAoB,EAApB,CAApB;AAEP,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAd,EAA0C;AACrD,QAAMC,EAAE,GAAGT,QAAQ,EAAnB;AACA,QAAM;AAAA,OAACU,cAAD;AAAA,OAAiBC;AAAjB,MAAsC1B,QAAQ,CAAU,EAAV,CAApD;AACA,QAAM;AAAA,OAAC2B,QAAD;AAAA,OAAWC;AAAX,MAA0B5B,QAAQ,CAACuB,kBAAD,CAAxC;AACA,QAAMM,MAAM,GAAGjB,WAAW,CAACE,iBAAD,CAA1B;AACA,QAAMgB,UAAU,GAAGlB,WAAW,CAACC,qBAAD,CAA9B;AACA,QAAM;AAACkB,IAAAA;AAAD,MAAcd,QAAQ,EAA5B;AACA,QAAMe,IAAI,GAAGpB,WAAW,CAACM,eAAD,CAAX,CAA6B,MAA7B,CAAb;;AACA,QAAMe,iBAAiB,GAAG,MAAOC,CAAP,IAAoB;AAC1CR,IAAAA,iBAAiB,CAAC,MAAM,CAAC,GAAGD,cAAJ,EAAoBS,CAApB,CAAP,CAAjB;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,OAAOC,IAAP,EAAqBC,QAArB,EAAwCC,QAAxC,EAA2DC,SAA3D,KAAkF;AACnG,UAAMjC,UAAU,CAACkC,IAAX,CAAgBlB,IAAI,CAACmB,EAArB,EAAyBL,IAAzB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,SAAnD,CAAN;AACH,GAFD;;AAIA,QAAMG,oBAAoB,GAAG,OAAOD,EAAP,EAAmBE,IAAnB,KAAiD;AAC1E,UAAMnC,OAAO,CAACiC,EAAD,EAAK,SAAL,EAAgBE,IAAhB,CAAb;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,OAAOC,MAAP,EAAuBF,IAAvB,KAAqD;AACvE,UAAMnC,OAAO,CAACqC,MAAD,EAAS,MAAT,EAAiBF,IAAjB,CAAb;AACH,GAFD;;AAIA5C,EAAAA,KAAK,CAAC+C,SAAN,CAAgB,MAAM;AAClB,eAAmC;AAC/B9B,MAAAA,IAAI,GAAG+B,OAAP,CAAe,yBAAwBzB,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEmB,EAA9B,CAAf,EAAiDO,MAAjD,CAAwD,cAAxD,EAAyEC,OAAD,IAAsB;AAC1F,YAAIA,OAAO,CAACjB,IAAR,CAAaS,EAAb,MAAoBT,IAApB,aAAoBA,IAApB,uBAAoBA,IAAI,CAAES,EAA1B,CAAJ,EAAkC;AAC9BV,UAAAA,SAAS,CAAC,6BAAD,CAAT;AACH;;AACDH,QAAAA,WAAW,CAAC,CAACqB,OAAO,CAACC,SAAT,GAAqB,CAACD,OAAD,EAAU,GAAGtB,QAAb,CAArB,GAA8CA,QAAQ,CAACwB,GAAT,CAAaC,IAAI,IAAI;AAC3E,cAAIH,OAAO,CAACC,SAAR,KAAsBE,IAAI,CAACX,EAA/B,EAAmC;AAC/B,mDACOW,IADP;AAEIzB,cAAAA,QAAQ,EAAE,CAAC,GAAGsB,OAAO,CAACtB,QAAZ,EAAsBsB,OAAtB;AAFd;AAIH;;AAED,iBAAOG,IAAP;AAEH,SAVyD,CAA/C,CAAX;AAWH,OAfD;AAgBApC,MAAAA,IAAI,GAAG+B,OAAP,CAAe,yBAAwBzB,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEmB,EAA9B,CAAf,EAAiDO,MAAjD,CAAwD,kBAAxD,EAA4EI,IAAI,IAAI;AAChFrB,QAAAA,SAAS,CAAE,gBAAeqB,IAAI,CAACpB,IAAL,CAAUqB,IAAK,4BAAhC,CAAT;AACAzB,QAAAA,WAAW,CAACD,QAAQ,CAACwB,GAAT,CAAaF,OAAO,IAAI;AAChC,cAAIA,OAAO,CAACR,EAAR,IAAcW,IAAI,CAACX,EAAvB,EAA2B;AACvB,mBAAOW,IAAP;AACH;;AAED,iBAAOH,OAAP;AACH,SANW,CAAD,CAAX;AAOH,OATD;AAUH;;AAED,WAAO,MAAM;AACTjC,MAAAA,IAAI,GAAGsC,KAAP,CAAa,gCAA+BhC,IAA/B,aAA+BA,IAA/B,uBAA+BA,IAAI,CAAEmB,EAArC,CAAb;AACH,KAFD;AAGH,GAjCD;AAmCA,sBACI;AAAA,2BACI,QAAC,UAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,mBAEK,CAACjB,EAAE,CAAC+B,IAAJ,iBACG;AAAK,UAAA,SAAS,EAAE,qBAAhB;AAAA,kCACI,QAAC,SAAD;AAAA,mCACI,QAAC,QAAD;AACI,cAAA,KAAK,EAAE,CACH;AACIF,gBAAAA,IAAI,EAAE,YADV;AAEIG,gBAAAA,GAAG,EAAE,UAFT;AAGIC,gBAAAA,IAAI,EAAE,WAHV;AAIIC,gBAAAA,QAAQ,EAAE,IAJd;AAKIC,gBAAAA,OAAO,EAAE;AALb,eADG,EAQH;AAACN,gBAAAA,IAAI,EAAE,OAAP;AAAgBG,gBAAAA,GAAG,EAAE,MAArB;AAA6BC,gBAAAA,IAAI,EAAE;AAAnC,eARG;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAeI,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,wDAAhB;AAAA,mCACI,QAAC,QAAD;AACI,cAAA,KAAK,EAAE3B,UAAU,CAACqB,GAAX,CAAeS,CAAC,KAAK;AACxBP,gBAAAA,IAAI,EAAEO,CAAC,CAACP,IADgB;AAExBG,gBAAAA,GAAG,EAAG,SAAQI,CAAC,CAACC,IAAK,EAFG;AAGxBJ,gBAAAA,IAAI,EAAG,IAAGG,CAAC,CAACC,IAAK;AAHO,eAAL,CAAhB;AADX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAfJ,eAwBI,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,0BAAhB;AAAA,mCACI,QAAC,IAAD;AACI,cAAA,KAAK,EAAEhC,MADX;AAEI,cAAA,YAAY,EAAEI,iBAFlB;AAGI,cAAA,aAAa,EAAER;AAHnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHR,eAqCI;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACI,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEH,IAAhB;AAAsB,YAAA,SAAS,EAAEsB;AAAjC;AAAA;AAAA;AAAA;AAAA,kBADJ,EAGKtB,IAAI,CAACwC,MAAL,KAAgB,QAAhB,iBACG;AAAK,YAAA,SAAS,EAAE,UAAhB;AAAA,oCACI,QAAC,eAAD;AAAiB,cAAA,YAAY,EAAE3B;AAA/B;AAAA;AAAA;AAAA;AAAA,oBADJ,eAGI;AAAK,cAAA,KAAK,EAAE;AAAC4B,gBAAAA,SAAS,EAAE;AAAZ,eAAZ;AAAA,qCACI,QAAC,WAAD;AACI,gBAAA,SAAS,EAAErB,oBADf;AAEI,gBAAA,QAAQ,EAAEf,QAFd;AAEwB,gBAAA,cAAc,EAAEQ;AAFxC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJR;AAAA;AAAA;AAAA;AAAA;AAAA,gBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8DH;AAED,OAAO,eAAe6B,kBAAf,CAAkCC,GAAlC,EAAuC;AAAA;;AAC1C,QAAMC,QAAQ,GAAG,MAAM9D,QAAQ,CAAC6D,GAAG,CAACE,KAAJ,CAAUN,IAAX,sBAAiBI,GAAG,CAACG,GAAJ,CAAQC,OAAzB,qDAAiB,iBAAiBC,UAAlC,CAA/B;AACA,QAAMC,gBAAgB,GAAG,MAAMpE,eAAe,CAAC+D,QAAQ,CAACM,IAAT,CAAc/B,EAAf,EAAmBwB,GAAG,CAACG,GAAJ,CAAQC,OAAR,CAAgBC,UAAnC,CAA9C;AACA,SAAO;AACHG,IAAAA,KAAK,EAAE;AACHnD,MAAAA,IAAI,EAAE4C,QAAQ,CAACM,IADZ;AAEHjD,MAAAA,kBAAkB,EAAEgD;AAFjB;AADJ,GAAP;AAMH","sourcesContent":["import React, {useState} from 'react';\r\nimport {LeftCategoriesSide} from '../../components/LeftCategoriesSide';\r\nimport {MainLayout} from '../../layouts/MainLayout';\r\nimport {FullPost} from '../../components/FullPost';\r\nimport {getPostComments, showPost} from \"../../services/api/PostApi\";\r\nimport TextField from '@mui/material/TextField';\r\nimport {AddCommentBlock} from \"../../components/AddCommentBlock\";\r\nimport {CommentApi} from \"../../services/api/CommentApi\";\r\nimport {CommentList} from \"../../components/CommentList\";\r\nimport {setLike} from \"../../services/api/LikeApi\";\r\nimport {SideBlock} from \"../../components/SideBlock\";\r\nimport {MenuList} from \"../../components/MenuList\";\r\nimport {Tags} from \"../../components/Tags\";\r\nimport {Comment, Theme} from \"../../interfaces\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCategoriesState, selectThemesState} from \"../../redux/directory/directory.selector\";\r\nimport {useAllMQ} from \"../../utils/useAllMQ\";\r\nimport {echo} from \"../../utils/echo\";\r\nimport {useAlert} from \"../../hooks/useAlert\";\r\nimport {selectUserState} from \"../../redux/user/user.selector\";\r\n\r\nexport const PostContext = React.createContext({});\r\n\r\nexport default function Post({post, serverSideComments}) {\r\n    const mq = useAllMQ();\r\n    const [selectedThemes, setSelectedThemes] = useState<Theme[]>([]);\r\n    const [comments, setComments] = useState(serverSideComments)\r\n    const themes = useSelector(selectThemesState);\r\n    const categories = useSelector(selectCategoriesState);\r\n    const {openAlert} = useAlert();\r\n    const user = useSelector(selectUserState)['data'];\r\n    const handleSelectTheme = async (t: Theme) => {\r\n        setSelectedThemes(() => [...selectedThemes, t]);\r\n    }\r\n\r\n    const onAddComment = async (text: string, toUserId?: number, parentId?: number, commentId?: number) => {\r\n        await CommentApi.save(post.id, text, toUserId, parentId, commentId);\r\n    }\r\n\r\n    const handleCommentSetLike = async (id: number, like?: 'like' | 'dislike') => {\r\n        await setLike(id, 'comment', like)\r\n    }\r\n\r\n    const handleSetLike = async (postId: number, like?: 'like' | 'dislike') => {\r\n        await setLike(postId, 'post', like)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (typeof window !== \"undefined\") {\r\n            echo().channel('ingternet-comments_' + post?.id).listen('.new-comment', (comment: Comment) => {\r\n                if (comment.user.id !== user?.id) {\r\n                    openAlert('Появился новый комментарий!')\r\n                }\r\n                setComments(!comment.parent_id ? [comment, ...comments] : comments.map(item => {\r\n                    if (comment.parent_id === item.id) {\r\n                        return {\r\n                            ...item,\r\n                            comments: [...comment.comments, comment]\r\n                        }\r\n                    }\r\n\r\n                    return item;\r\n\r\n                }))\r\n            })\r\n            echo().channel('ingternet-comments_' + post?.id).listen('.updated-comment', item => {\r\n                openAlert(`Пользователь ${item.user.name} изменил свой комментарий!`)\r\n                setComments(comments.map(comment => {\r\n                    if (comment.id == item.id) {\r\n                        return item\r\n                    }\r\n\r\n                    return comment;\r\n                }))\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            echo().leave('laravel_database_comments_' + post?.id)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <main>\r\n            <MainLayout>\r\n                <div className=\"wrapper-center\">\r\n\r\n                    {!mq.isXS && (\r\n                        <div className={'left-side-no-margin'}>\r\n                            <SideBlock>\r\n                                <MenuList\r\n                                    items={[\r\n                                        {\r\n                                            name: 'Популярное',\r\n                                            url: '/popular',\r\n                                            icon: '/fire.svg',\r\n                                            isActive: true,\r\n                                            hasMore: true\r\n                                        },\r\n                                        {name: 'Новое', url: '/new', icon: '/news.svg'},\r\n                                    ]}\r\n                                />\r\n                            </SideBlock>\r\n                            <SideBlock name=\"Категории\">\r\n                                <MenuList\r\n                                    items={categories.map(c => ({\r\n                                        name: c.name,\r\n                                        url: `/tags/${c.slug}`,\r\n                                        icon: `/${c.slug}.png`\r\n                                    }))}\r\n                                />\r\n                            </SideBlock>\r\n                            <SideBlock name=\"Темы\">\r\n                                <Tags\r\n                                    items={themes}\r\n                                    handleSelect={handleSelectTheme}\r\n                                    selectedItems={selectedThemes}\r\n                                />\r\n                            </SideBlock>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"content\">\r\n                        <FullPost post={post} onSetLike={handleSetLike}/>\r\n\r\n                        {post.status === 'active' && (\r\n                            <div className={'comments'}>\r\n                                <AddCommentBlock onAddComment={onAddComment}/>\r\n\r\n                                <div style={{marginTop: 15}}>\r\n                                    <CommentList\r\n                                        onSetLike={handleCommentSetLike}\r\n                                        comments={comments} onReplyComment={onAddComment}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </div>\r\n                </div>\r\n            </MainLayout>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const response = await showPost(ctx.query.slug, ctx.req.cookies?.auth_token);\r\n    const responseComments = await getPostComments(response.data.id, ctx.req.cookies.auth_token);\r\n    return {\r\n        props: {\r\n            post: response.data,\r\n            serverSideComments: responseComments\r\n        },\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}