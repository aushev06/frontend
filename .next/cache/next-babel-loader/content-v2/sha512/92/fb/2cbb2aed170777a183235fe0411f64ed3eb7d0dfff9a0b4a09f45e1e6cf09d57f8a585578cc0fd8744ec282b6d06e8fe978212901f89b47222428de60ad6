{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Projects\\\\projects\\\\frontend\\\\components\\\\Editor\\\\Editor.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useRef } from \"react\";\nimport { saveByUrl, saveImage } from \"../../services/api/PostApi\";\nexport function EditorJsWrapper(_ref) {\n  let {\n    config = {},\n    blocks\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"config\", \"blocks\"]);\n\n  const elmtRef = useRef();\n  useEffect(() => {\n    if (!elmtRef.current) {\n      return;\n    } // @ts-ignore\n\n\n    let editorJs;\n    (async () => {\n      const {\n        default: EditorJS\n      } = await import(\"@editorjs/editorjs\"); // @ts-ignore\n\n      const {\n        default: Header\n      } = await import('@editorjs/header'); // @ts-ignore\n\n      const {\n        default: ImageTool\n      } = await import('@editorjs/image'); // @ts-ignore\n\n      const {\n        default: Code\n      } = await import('@editorjs/code'); // @ts-ignore\n\n      const {\n        default: Quote\n      } = await import('@editorjs/quote'); // @ts-ignore\n\n      const {\n        default: List\n      } = await import('@editorjs/list');\n      editorJs = new EditorJS(_objectSpread(_objectSpread({}, config), {}, {\n        holder: elmtRef.current,\n        tools: {\n          header: {\n            class: Header,\n            inlineToolbar: true,\n            config: {\n              placeholder: 'Введите заголовок'\n            }\n          },\n          Code,\n          Quote,\n          List,\n          image: {\n            class: ImageTool,\n            config: {\n              uploader: {\n                uploadByFile: async image => {\n                  const data = await saveImage(image);\n                  return data.data;\n                },\n                uploadByUrl: async url => {\n                  const data = await saveByUrl(url);\n                  return data.data;\n                }\n              }\n            }\n          }\n        },\n\n        /**\r\n         * Previously saved data that should be rendered\r\n         */\n        data: {\n          blocks\n        }\n      }));\n    })().catch(error => console.error(error));\n    return () => {\n      // @ts-ignore\n      editorJs.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, restProps), {}, {\n    ref: elmt => {\n      // @ts-ignore\n      elmtRef.current = elmt;\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Projects/projects/frontend/components/Editor/Editor.tsx"],"names":["useEffect","useRef","saveByUrl","saveImage","EditorJsWrapper","config","blocks","restProps","elmtRef","current","editorJs","default","EditorJS","Header","ImageTool","Code","Quote","List","holder","tools","header","class","inlineToolbar","placeholder","image","uploader","uploadByFile","data","uploadByUrl","url","catch","error","console","destroy","elmt"],"mappings":";;;;;;;;;;;;;AACA,SAAwBA,SAAxB,EAAmCC,MAAnC,QAAgD,OAAhD;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,4BAAnC;AAOA,OAAO,SAASC,eAAT,OAAiG;AAAA,MAAxE;AAACC,IAAAA,MAAM,GAAG,EAAV;AAAcC,IAAAA;AAAd,GAAwE;AAAA,MAA/CC,SAA+C;;AACpG,QAAMC,OAAO,GAAGP,MAAM,EAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACQ,OAAO,CAACC,OAAb,EAAsB;AAClB;AACH,KAHW,CAKZ;;;AACA,QAAIC,QAAJ;AAEA,KAAC,YAAY;AACT,YAAM;AAACC,QAAAA,OAAO,EAAEC;AAAV,UAAsB,MAAM,OAAO,oBAAP,CAAlC,CADS,CAET;;AACA,YAAM;AAACD,QAAAA,OAAO,EAAEE;AAAV,UAAoB,MAAM,OAAO,kBAAP,CAAhC,CAHS,CAIT;;AACA,YAAM;AAACF,QAAAA,OAAO,EAAEG;AAAV,UAAwB,MAAM,OAAO,iBAAP,CAApC,CALS,CAOT;;AACA,YAAM;AAACH,QAAAA,OAAO,EAAEI;AAAV,UAAmB,MAAM,OAAO,gBAAP,CAA/B,CARS,CAUT;;AACA,YAAM;AAACJ,QAAAA,OAAO,EAAEK;AAAV,UAAoB,MAAM,OAAO,iBAAP,CAAhC,CAXS,CAaT;;AACA,YAAM;AAACL,QAAAA,OAAO,EAAEM;AAAV,UAAmB,MAAM,OAAO,gBAAP,CAA/B;AAEAP,MAAAA,QAAQ,GAAG,IAAIE,QAAJ,iCACJP,MADI;AAGPa,QAAAA,MAAM,EAAEV,OAAO,CAACC,OAHT;AAIPU,QAAAA,KAAK,EAAE;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAER,MADH;AAEJS,YAAAA,aAAa,EAAE,IAFX;AAGJjB,YAAAA,MAAM,EAAE;AACJkB,cAAAA,WAAW,EAAE;AADT;AAHJ,WADL;AAQHR,UAAAA,IARG;AASHC,UAAAA,KATG;AAUHC,UAAAA,IAVG;AAWHO,UAAAA,KAAK,EAAE;AACHH,YAAAA,KAAK,EAAEP,SADJ;AAEHT,YAAAA,MAAM,EAAE;AACJoB,cAAAA,QAAQ,EAAE;AACNC,gBAAAA,YAAY,EAAE,MAAOF,KAAP,IAAuB;AACjC,wBAAMG,IAAI,GAAG,MAAMxB,SAAS,CAACqB,KAAD,CAA5B;AACA,yBAAOG,IAAI,CAACA,IAAZ;AACH,iBAJK;AAKNC,gBAAAA,WAAW,EAAE,MAAOC,GAAP,IAAuB;AACjC,wBAAMF,IAAI,GAAG,MAAMzB,SAAS,CAAC2B,GAAD,CAA5B;AACA,yBAAOF,IAAI,CAACA,IAAZ;AACF;AARK;AADN;AAFL;AAXJ,SAJA;;AAgCP;AAChB;AACA;AACgBA,QAAAA,IAAI,EAAE;AACFrB,UAAAA;AADE;AAnCC,SAAX;AAuCH,KAvDD,IAuDKwB,KAvDL,CAuDYC,KAAD,IAAiBC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAvD5B;AAyDA,WAAO,MAAY;AACf;AACArB,MAAAA,QAAQ,CAACuB,OAAT;AACH,KAHD;AAIH,GArEQ,EAqEN,EArEM,CAAT;AAuEA,sBACI,+CACQ1B,SADR;AAEI,IAAA,GAAG,EAAG2B,IAAD,IAAgB;AACjB;AACA1B,MAAAA,OAAO,CAACC,OAAR,GAAkByB,IAAlB;AACH;AALL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH","sourcesContent":["import {EditorConfig} from \"@editorjs/editorjs\";\r\nimport {ComponentProps, useEffect, useRef} from \"react\";\r\nimport {saveByUrl, saveImage} from \"../../services/api/PostApi\";\r\n\r\ninterface EditorJsWrapperProps extends ComponentProps<\"div\"> {\r\n    config?: EditorConfig;\r\n    blocks: Array<any>,\r\n}\r\n\r\nexport function EditorJsWrapper({config = {}, blocks, ...restProps}: EditorJsWrapperProps): JSX.Element {\r\n    const elmtRef = useRef<HTMLDivElement>();\r\n\r\n    useEffect(() => {\r\n        if (!elmtRef.current) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        let editorJs;\r\n\r\n        (async () => {\r\n            const {default: EditorJS} = await import(\"@editorjs/editorjs\");\r\n            // @ts-ignore\r\n            const {default: Header} = await import('@editorjs/header');\r\n            // @ts-ignore\r\n            const {default: ImageTool } = await import('@editorjs/image');\r\n\r\n            // @ts-ignore\r\n            const {default: Code } = await import('@editorjs/code');\r\n\r\n            // @ts-ignore\r\n            const {default: Quote } = await import('@editorjs/quote');\r\n\r\n            // @ts-ignore\r\n            const {default: List } = await import('@editorjs/list');\r\n\r\n            editorJs = new EditorJS({\r\n                ...config,\r\n\r\n                holder: elmtRef.current,\r\n                tools: {\r\n                    header: {\r\n                        class: Header,\r\n                        inlineToolbar: true,\r\n                        config: {\r\n                            placeholder: 'Введите заголовок'\r\n                        },\r\n                    },\r\n                    Code,\r\n                    Quote,\r\n                    List,\r\n                    image: {\r\n                        class: ImageTool,\r\n                        config: {\r\n                            uploader: {\r\n                                uploadByFile: async (image: File) => {\r\n                                    const data = await saveImage(image);\r\n                                    return data.data\r\n                                },\r\n                                uploadByUrl: async (url: string) => {\r\n                                   const data = await saveByUrl(url);\r\n                                   return data.data;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Previously saved data that should be rendered\r\n                 */\r\n                data: {\r\n                    blocks\r\n                },\r\n            });\r\n        })().catch((error): void => console.error(error));\r\n\r\n        return (): void => {\r\n            // @ts-ignore\r\n            editorJs.destroy();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            {...restProps}\r\n            ref={(elmt): void => {\r\n                // @ts-ignore\r\n                elmtRef.current = elmt;\r\n            }}\r\n        />\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}